diff --git a/dist/definitions/constants.d.ts b/dist/definitions/constants.d.ts
index a68cb89c44f60225d8d9eb1fcf813a4b71247b3e..7ae7253d947b6b33c858ae5e169d919b138ad06c 100644
--- a/dist/definitions/constants.d.ts
+++ b/dist/definitions/constants.d.ts
@@ -4,5 +4,8 @@ export declare const PLUGIN_GIT_BRANCH = "main";
 export declare const YARNRC_FILENAME = ".yarnrc.yml";
 export declare const DEFAULT_NPM_REGISTRY = "https://registry.npmjs.org";
 export declare const DEFAULT_YARN_REGISTRY = "https://registry.yarnpkg.com";
+export declare const OFFICIAL_REGISTRY = "https://registry.npmjs.org";
 export declare const defaultRegistries: string[];
 export declare function isDefaultRegistry(registry: string): boolean;
+export declare const GITHUB_ACTIONS_PROVIDER_NAME = "Github Actions";
+export declare const GITLAB_PIPELINES_PROVIDER_NAME = "Gitlab CI/CD";
diff --git a/dist/definitions/constants.js b/dist/definitions/constants.js
index b22bd7fa541b9545dddb3ae9f79292104cd73fad..1591c01077e17d46da335044695bdac50dfd64f0 100644
--- a/dist/definitions/constants.js
+++ b/dist/definitions/constants.js
@@ -6,7 +6,10 @@ export const PLUGIN_GIT_BRANCH = "main";
 export const YARNRC_FILENAME = ".yarnrc.yml";
 export const DEFAULT_NPM_REGISTRY = "https://registry.npmjs.org";
 export const DEFAULT_YARN_REGISTRY = "https://registry.yarnpkg.com";
+export const OFFICIAL_REGISTRY = DEFAULT_NPM_REGISTRY;
 export const defaultRegistries = [DEFAULT_NPM_REGISTRY, DEFAULT_YARN_REGISTRY];
 export function isDefaultRegistry(registry) {
     return defaultRegistries.some((defaultRegistry) => toNerfDart(defaultRegistry) === toNerfDart(registry));
 }
+export const GITHUB_ACTIONS_PROVIDER_NAME = "Github Actions";
+export const GITLAB_PIPELINES_PROVIDER_NAME = "Gitlab CI/CD";
diff --git a/dist/definitions/context.d.ts b/dist/definitions/context.d.ts
index 4eedafb86f01f5596a98e86b7362b0da3972afa9..07046165527e8c361e7c84aa8da7648af92f9b36 100644
--- a/dist/definitions/context.d.ts
+++ b/dist/definitions/context.d.ts
@@ -1,4 +1,3 @@
-/// <reference types="node" />
 import type { CiEnv } from "env-ci";
 import type stream from "node:stream";
 import type { Commit, Options } from "semantic-release";
diff --git a/dist/definitions/errors.d.ts b/dist/definitions/errors.d.ts
index b215802ced7ca6a770231531a1693c20c05f4b29..146f41e524f7e0284e70eb7eda25d9ced71b0e40 100644
--- a/dist/definitions/errors.d.ts
+++ b/dist/definitions/errors.d.ts
@@ -28,6 +28,10 @@ export declare function ENONPMTOKEN({ registry }: {
     message: string;
     details: string;
 };
+export declare function EINVALIDNPMAUTH(): {
+    message: string;
+    details: string;
+};
 export declare function EINVALIDNPMTOKEN({ registry }: {
     registry: string;
 }): {
diff --git a/dist/definitions/errors.js b/dist/definitions/errors.js
index eed792cbc0d1a2daf112467e27afa1bb7ac3c0ee..5858d4e6e7d9c92ead470b0aa9baefda66a4bcb6 100644
--- a/dist/definitions/errors.js
+++ b/dist/definitions/errors.js
@@ -37,11 +37,17 @@ Your configuration for the "mainWorkspace" option is "${mainWorkspace}".`,
 export function ENONPMTOKEN({ registry }) {
     return {
         message: "No NPM access token specified.",
-        details: `A [NPM access token](${linkify("README.md#npm-registry-authentication")}) must be provided in your configuration. The token must allow to publish to the registry "${registry}".
+        details: `When not publishing through [trusted publishing](https://docs.npmjs.com/trusted-publishers) an [NPM access token](${linkify("README.md#npm-registry-authentication")}) must be provided in your configuration. The token must allow to publish to the registry "${registry}".
       
 Please refer to the [npm registry authentication](${linkify("README.md#npm-registry-authentication")}) section of the README to learn how to configure the NPM registry access token.`,
     };
 }
+export function EINVALIDNPMAUTH() {
+    return {
+        message: "Invalid npm authentication.",
+        details: `The [authentication required to publish](${linkify("README.md#npm-registry-authentication")}) is not configured as needed.`,
+    };
+}
 export function EINVALIDNPMTOKEN({ registry }) {
     return {
         message: "Invalid NPM access token.",
diff --git a/dist/trusted-publishing/oidc-context.d.ts b/dist/trusted-publishing/oidc-context.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..20207dd2b95585baa93f35ae9c481338ac27cae0
--- /dev/null
+++ b/dist/trusted-publishing/oidc-context.d.ts
@@ -0,0 +1,3 @@
+import type { CommonContext } from "../definitions/context.js";
+import type { PackageJson } from "read-pkg";
+export default function oidcContextEstablished(registry: string, pkg: PackageJson, context: CommonContext): Promise<boolean>;
diff --git a/dist/trusted-publishing/oidc-context.js b/dist/trusted-publishing/oidc-context.js
new file mode 100644
index 0000000000000000000000000000000000000000..8a8b58c375315fd75211de0439214a83deaa17ac
--- /dev/null
+++ b/dist/trusted-publishing/oidc-context.js
@@ -0,0 +1,5 @@
+import { OFFICIAL_REGISTRY } from "../definitions/constants.js";
+import exchangeToken from "./token-exchange.js";
+export default async function oidcContextEstablished(registry, pkg, context) {
+    return (OFFICIAL_REGISTRY === registry && !!(await exchangeToken(pkg, context)));
+}
diff --git a/dist/trusted-publishing/token-exchange.d.ts b/dist/trusted-publishing/token-exchange.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..30f0334396a052b0e35eaa453927fb1483a4e1a9
--- /dev/null
+++ b/dist/trusted-publishing/token-exchange.d.ts
@@ -0,0 +1,3 @@
+import type { PackageJson } from "read-pkg";
+import type { CommonContext } from "../definitions/context.js";
+export default function exchangeToken(pkg: PackageJson, { logger }: CommonContext): Promise<string | undefined> | undefined;
diff --git a/dist/trusted-publishing/token-exchange.js b/dist/trusted-publishing/token-exchange.js
new file mode 100644
index 0000000000000000000000000000000000000000..c255456c01651883947235f4af001a79c50d4d85
--- /dev/null
+++ b/dist/trusted-publishing/token-exchange.js
@@ -0,0 +1,50 @@
+import { getIDToken } from "@actions/core";
+import envCi from "env-ci";
+import { OFFICIAL_REGISTRY, GITHUB_ACTIONS_PROVIDER_NAME, GITLAB_PIPELINES_PROVIDER_NAME, } from "../definitions/constants.js";
+async function exchangeIdToken(idToken, packageName, logger) {
+    const response = await fetch(`${OFFICIAL_REGISTRY}-/npm/v1/oidc/token/exchange/package/${encodeURIComponent(packageName)}`, {
+        method: "POST",
+        headers: { Authorization: `Bearer ${idToken}` },
+    });
+    const responseBody = (await response.json());
+    if (response.ok) {
+        logger.log("OIDC token exchange with the npm registry succeeded");
+        return responseBody.token;
+    }
+    logger.log(`OIDC token exchange with the npm registry failed: ${response.status} ${responseBody.message}`);
+    return undefined;
+}
+async function exchangeGithubActionsToken(packageName, logger) {
+    let idToken;
+    logger.log("Verifying OIDC context for publishing from GitHub Actions");
+    try {
+        idToken = await getIDToken("npm:registry.npmjs.org");
+    }
+    catch (e) {
+        if (e instanceof Error) {
+            logger.log(`Retrieval of GitHub Actions OIDC token failed: ${e.message}`);
+            logger.log("Have you granted the `id-token: write` permission to this workflow?");
+        }
+        return undefined;
+    }
+    return exchangeIdToken(idToken, packageName, logger);
+}
+async function exchangeGitlabPipelinesToken(packageName, logger) {
+    const idToken = process.env["NPM_ID_TOKEN"];
+    logger.log("Verifying OIDC context for publishing from GitLab Pipelines");
+    if (!idToken) {
+        return undefined;
+    }
+    return exchangeIdToken(idToken, packageName, logger);
+}
+export default function exchangeToken(pkg, { logger }) {
+    // @ts-expect-error the types seem to be wrong
+    const { name: ciProviderName } = envCi();
+    if (GITHUB_ACTIONS_PROVIDER_NAME === ciProviderName && pkg.name) {
+        return exchangeGithubActionsToken(pkg.name, logger);
+    }
+    if (GITLAB_PIPELINES_PROVIDER_NAME === ciProviderName && pkg.name) {
+        return exchangeGitlabPipelinesToken(pkg.name, logger);
+    }
+    return undefined;
+}
diff --git a/dist/verify-auth.js b/dist/verify-auth.js
index fa2d71a59ee6cd91f6d0840e6469979a8f080ec9..990c4e8e73c278dbf93b8e3885f848ad95cb1909 100644
--- a/dist/verify-auth.js
+++ b/dist/verify-auth.js
@@ -5,6 +5,7 @@ import { getError } from "./get-error.js";
 import { getRegistry } from "./get-registry.js";
 import { getToken } from "./get-token.js";
 import { getYarnConfig } from "./get-yarn-config.js";
+import oidcContextEstablished from "./trusted-publishing/oidc-context.js";
 export async function verifyAuth({ pkgRoot }, pkg, context) {
     const { cwd, env, stdout, stderr, logger } = context;
     const basePath = pkgRoot ? resolve(cwd, String(pkgRoot)) : cwd;
@@ -12,8 +13,8 @@ export async function verifyAuth({ pkgRoot }, pkg, context) {
     const AggregateError = await getImplementation("AggregateError");
     const yarnrc = await getYarnConfig(context);
     const registry = getRegistry(pkg, yarnrc, context);
-    const token = getToken(registry, yarnrc, context);
-    if (!token) {
+    if (!(await oidcContextEstablished(registry, pkg, context)) &&
+        !getToken(registry, yarnrc, context)) {
         throw new AggregateError([getError("ENONPMTOKEN", { registry })]);
     }
     if (!isDefaultRegistry(registry)) {
diff --git a/dist/yarn-plugins.d.ts b/dist/yarn-plugins.d.ts
index 55af6f2acbc7114489c7cca78b48d14b64907744..419340d6b824a7bbaea5a9d834fce23cf1b3c903 100644
--- a/dist/yarn-plugins.d.ts
+++ b/dist/yarn-plugins.d.ts
@@ -2,4 +2,4 @@ import type { CommonContext } from "./definitions/context.js";
 export declare function installYarnPluginIfNeeded(name: string, { cwd, env, logger, stdout, stderr }: CommonContext): Promise<boolean>;
 export declare function getYarnPlugins({ cwd }: {
     cwd: CommonContext["cwd"];
-}): Promise<string[]>;
+}): Promise<any[]>;
diff --git a/dist/yarn-workspaces.d.ts b/dist/yarn-workspaces.d.ts
index 007521accdaeee5b1527deb263ada91c72e2baca..bb964ff2569867d65695fc6c4bd1692a1550da32 100644
--- a/dist/yarn-workspaces.d.ts
+++ b/dist/yarn-workspaces.d.ts
@@ -1,7 +1,4 @@
 import type { CommonContext } from "./definitions/context.js";
 export declare function getWorkspaces({ cwd }: {
     cwd: CommonContext["cwd"];
-}): Promise<{
-    location: string;
-    name: string;
-}[]>;
+}): Promise<any[]>;
diff --git a/package.json b/package.json
index e4610d0e40d0c929126ce881426d2858a1ccc183..931d9e046aaa9eddd24d842adbeb79f0c39c4c7f 100644
--- a/package.json
+++ b/package.json
@@ -52,47 +52,49 @@
     ]
   },
   "dependencies": {
+    "@actions/core": "^1.11.1",
     "@semantic-release/error": "^4.0.0",
+    "@types/env-ci": "^3.1.4",
     "aggregate-error": "^5.0.0",
-    "cosmiconfig": "^8.1.0",
+    "cosmiconfig": "^9.0.0",
+    "env-ci": "^11.2.0",
     "execa": "^8.0.1",
     "fs-extra": "^11.1.0",
     "js-yaml": "^4.1.0",
     "lodash": "^4.17.21",
     "nerf-dart": "^1.0.0",
-    "read-pkg": "^8.0.0",
+    "read-pkg": "^9.0.1",
     "semver": "^7.3.8"
   },
   "devDependencies": {
     "@semantic-release/changelog": "6.0.3",
     "@semantic-release/git": "10.0.1",
-    "@types/dockerode": "3.3.20",
-    "@types/env-ci": "3.1.3",
-    "@types/fs-extra": "11.0.3",
-    "@types/js-yaml": "4.0.8",
-    "@types/lodash": "4.14.200",
-    "@types/node": "20.8.3",
+    "@types/dockerode": "3.3.28",
+    "@types/fs-extra": "11.0.4",
+    "@types/js-yaml": "4.0.9",
+    "@types/lodash": "4.17.15",
+    "@types/node": "22.13.4",
     "@types/prettier": "3.0.0",
-    "@types/semantic-release": "20.0.2",
-    "@types/semver": "7.5.4",
-    "@types/sinon": "10.0.16",
-    "@types/stream-buffers": "3.0.5",
-    "ava": "5.3.1",
-    "dockerode": "4.0.0",
+    "@types/semantic-release": "20.0.6",
+    "@types/semver": "7.5.8",
+    "@types/sinon": "17.0.4",
+    "@types/stream-buffers": "3.0.7",
+    "ava": "6.2.0",
+    "dockerode": "4.0.4",
     "doctoc": "2.2.1",
     "get-stream": "7.0.1",
     "got": "12.6.0",
-    "husky": "8.0.3",
-    "lint-staged": "14.0.1",
-    "moker": "2.0.6",
-    "p-retry": "6.1.0",
-    "prettier": "3.0.3",
-    "semantic-release": "22.0.5",
-    "sinon": "17.0.0",
-    "stream-buffers": "3.0.2",
+    "husky": "9.1.6",
+    "lint-staged": "15.4.3",
+    "moker": "4.3.0",
+    "p-retry": "6.2.1",
+    "prettier": "3.5.3",
+    "semantic-release": "24.2.2",
+    "sinon": "19.0.2",
+    "stream-buffers": "3.0.3",
     "tempy": "3.1.0",
-    "ts-node": "10.9.1",
-    "typescript": "5.2.2"
+    "ts-node": "10.9.2",
+    "typescript": "5.7.3"
   },
   "peerDependencies": {
     "semantic-release": ">=19.0.0"
